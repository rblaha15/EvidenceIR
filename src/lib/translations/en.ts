import type { PlainTranslations } from "$lib/translations"
import { template as t } from "$lib/helpers/templates"
import cs from "./cs"

const en: PlainTranslations = {
    search: {
        titleControllers: 'Search installations',
        titleControllersAndProtocols: 'Search installations and independent service protocols',
        search: `Search`,
        nFewProtocols: t`${'n'} protocols`,
        nMoreProtocols: t`${'n'} protocols`,
    },
    auth: {
        password: 'Password',
        confirmPassword: 'Confirm password',
        checkInternet: 'Check your Internet connection!',
        nonexistentEmailHtml: t`That account does not exist! <a href="${'link'}">Create it?</a>`,
        wrongPasswordHtml: t`Wrong password! <a href="${'link'}">Forgotten password?</a>`,
        tooManyRequests: 'Too many requests! Please wait a bit',
        somethingWentWrong: 'Something went wrong :\\',
        passwordTooWeak: 'Password is too weak!',
        pleaseUseBusinessEmail: 'Please use your business email.',
        emailInUse: 'This account already exists',
        passwordsDoNotMatch: "Passwords don't match!",
        save: 'Save',
        logInNeeded: 'You must log in to view and fill out the form!',
        signUp: 'Sign up',
        toSignUp: 'Sign up',
        back: 'Back',
        logIn: 'Log in',
        toLogIn: 'Log in',
        toLogOut: 'Log out',
        dontHaveAccount: "Don't have an account?",
        fillInPassword: 'Please, enter your password.',
        newPassword: 'New Password',
        sendConfirmEmail: 'Send confirmation email',
        passwordReset: `Password reset`,
        passwordResetEmailHtml: t`<p>Hello,</p>
<p>Follow this link to reset your IR Registration password for your account ${'email'}:</p>
<p><a href="${'link'}">${'link'}</a></p>
<p>If you have not asked to reset your password, you can ignore this email.</p>
<p>Thanks</p>
<p>IR Registration</p>`,
        passwordEdited: `Password has been edited, log in please`,
        registered: `Registration was successful, log in please`,
        passwordHasBeenReset: `Password has been reset, log in please`,
        email: 'Email',
        emailSent: 'Email sent. You can now close this tab.',
        sending: 'Sending',
        useNameSurnameEmail: 'Please, use your email address with your name and surname.',
        requiresLogIn: `You have to be logged in to access this site.`,
        responsiblePerson: 'Responsible person',
        changePassword: `Change password`,
        noAccess: `You do not have access to this page.`,
        siteDoesNotExist: `This site does not exist. And yes, we've looked behind the pump and even under the collectors…`,
    },
    theme: {
        dark: 'Dark',
        light: 'Light',
        auto: 'Auto',
    },
    units: {
        ...cs.units,
        MWhPerYear: 'MWh/year',
    },
    form: {
        save: 'Save',
        saveAndSend: 'Save & send emails',
        saving: 'Saving...',
        youHaveAMistake: t`You have a mistake in the form. Please, check the filled information. Invalid fields: ${'fields'}`,
        somethingWentWrongContactUsHtml: `Apologize, something went wrong, please contact us at <a href="mailto:Regulus SEIR<aplikace.regulus@gmail.com>?subject=Error saving a form" target="_blank">aplikace.regulus@gmail.com</a>`,
        back: 'Back',
        emailNotSent: t`The email could not be sent: ${'status'} ${'statusText'}`,
        redirecting: `Redirecting…`,
        mandatoryFields: `mandatory fields`,
        clearForm: `Clear the form`,
        import: {
            confirm: 'Confirm',
            cancel: 'Cancel',
            importData: `Import data`,
            chosen_File: `Chosen:`,
            uploadExcel: t`Upload a legacy MS Excel workbook with data filled in on the ${'sheet'} sheet.`,
            warningDataLoss: `Warning! Potvrzením přepíšete všechna zatím vyplněná data!`,
            choseFile: `Select a file`,
            choseDifferentFile: `Select another file`,
            uploadPdf: `Upload a PDF document with data filled in`,
            somethingWentWrong: `Something went wrong...`,
            workbookSheet: `Workbook sheet`,
        },
    },
    countsGenitive: {
        first: `first`,
        second: `second`,
        third: `third`,
        fourth: `fourth`,
        fifth: `fifth`,
        sixth: `sixth`,
        seventh: `seventh`,
        eighth: `eighth`,
        ninth: `ninth`,
        tenth: `tenth`,
    },
    in: {
        fve: {
            otherNotRegulusPanels: 'Other (not from Regulus)',
        },
        controllerType: 'Controller type',
        serialNumber: 'Controller serial number',
        serialNumberIndoor: 'Indoor unit serial number',
        heatPumpType: 'Heat pump type',
        heatPumpsType: 'Type of heat pumps',
        hpCount: 'Heat pump count',
        heatPumpModel: t`${0}heat pump model`,
        heatPumpManufactureNumber: t`${0}heat pump manufacture number`,
        endUser: 'End user',
        name: 'Name',
        surname: 'Surname',
        birthday: 'Day of birth',
        phone: 'Phone number',
        email: 'Email',
        realizationLocation: 'Realization location',
        town: 'Municipality',
        street: 'Street name and/or building number',
        crn: 'Company registration number',
        representativeName: 'Company representative name',
        commissioning: 'Commissioning',
        commissionedByAssemblyCompany: 'Commissioned by the assembly company',
        chosenCompany: 'Chosen company',
        residence: 'Place of residence',
        whatToAddInfoTo: 'What would you like to add more detailed information to?',
        heatPumps: 'Heat pumps',
        recoveryVentilationUnitType: `Recovery ventilation unit type`,
        pleaseFillInIrType: 'Please, fill in the IR type',
        note: 'Note',
        searchCompanyInList: 'Search company in list',
        searchRepresentative: 'Search representative',
        irExistsHtml: t`This controller is already registered (<a href="${'link'}">detail</a>)`,
        editing: `Editing`,
        samePlaceAsResidence: 'Same as the place of residence',
        companyName: `Name`,
        title: `New controller registration`,
        assemblyCompany: `Assembly company`,
        commissioningCompany: `Commissioning company`,
        establishment: `Establishment`,
        headquarters: `Headquarters`,
        zip: `Postal code (ZIP)`,
        samePlaceAsHeadquarters: `Same as the place of headquarters`,
        or_CRN: `or`,
        recognised_BOX: t`Recognised: ${0}`,
        solarControllerType: 'Solar controller type',
        solarCollectorCount: `Solar collector count`,
        photovoltaicSystem: `Photovoltaic system`,
        panelType: 'Panel type',
        panelCount: 'Panel count',
        inverterType: 'Inverter type',
        inverterManufactureNumber: 'Inverter manufacture number',
        accumulationToBatteries: 'Accumulation to batteries',
        batteryType: 'Type of the batteries',
        totalBatteryCapacity: 'Total battery capacity',
        chargingStationWallbox: 'Charging station – wallbox',
        irCooperation: 'Cooperation with the IR controller',
        description: `Description`,
        endCustomer: 'End customer',
        remoteAccess: {
            title: 'Remote Access',
            doYouWantRemoteAccess: 'Create a remote access to the controller',
            whoHasAccess: 'Who is going to have access to it?',
            whoWillBeInvoiced: 'Who will be invoiced for the remote access (one-time price 1000 CZK incl. VAT)',
            responsiblePerson: `Responsible person`,
            endCustomer: `End customer`,
            assemblyCompany: 'Assembly company',
            commissioningCompany: 'Commissioning company',
            doNotInvoice: `Don't invoice`,
            laterAccordingToTheProtocol: 'Later, according to the protocol',
        },
        userType: {
            individual: `Individual`,
            company: `Company`,
        },
        ir: {
            fve: `None – photovoltaic system only`,
        },
        device: {
            heatPump: 'Heat pump',
            ventilation: `Heat Recovery Ventilation`,
            solarCollector: `Solar collector`,
            photovoltaicPowerPlant: 'Photovoltaic power plant',
            other: 'Other device',
        },
        tc: {
            airToWater: 'Air-to-Water',
            groundToWater: 'Ground-to-Water',
        },
    },
    wrong: {
        number: 'Invalid number format',
        date: 'Invalid date format',
        phone: 'Invalid phone number format',
        email: 'Invalid email format',
        zip: 'Invalid postal code format',
        crn: 'Invalid CRN format',
        company: `Warning, the company form is incorrectly formatted!`,
    },
    nav: {
        appName: "SEIR",
        settings: {
            title: `Settings`,
            userSettings: `User settings`,
            appTheme: `App theme`,
            language: `Language`,
            appInfo: `App information`,
            appVersion: t`App version: ${'version'} (${'build'}) (${'type'})`,
            clearBrowserData: `Clear data from the browser`,
            clearDataInfo: `Website data in the browser include your user settings, pages saved for offline use and all unfinished forms. Data already saved and sent to the server will not be deleted. You will not be logged out of your account.`,
            close: `Close`,
        },
        installationDetails: `Installation details`,
        protocolDetails: `Protocol details`,
        newRegistration: 'New registration',
        independentServiceProtocol: `Independent service protocol`,
        search: `Search`,
        back: 'Back',
        offlineQueue: {
            title: `Queue of unsent changes and emails`,
            close: `Close`,
            description: `You are offline and have performed several changes in the app data. You can view and edit all of the edited information in the app as usual, but they will NOT be sent to the serer until you open the app WITH AN INTERNET CONNECTION!`,
            changes: `Performed, unsent changes:`,
            unsentEmail: t`Unsent email: ${'subject'}`,
            f: {
                addIR: t`Registered a new controller (${'ir'})`,
                deleteIR: t`Removed the record of the ${'ir'} controller`,
                updateIRRecord: t`Changed the information of the ${'ir'} controller`,
                addHeatPumpCheck: t`Created a yearly heat pump check for the ${'pump'} heat pump for year ${'year'} at the ${'ir'} controller`,
                addServiceProtocol: t`Created a service protocol ${'sp'} at the ${'ir'} controller`,
                updateServiceProtocol: t`Edited the ${'sp'} service protocol at the ${'ir'} controller`,
                addFaceTable: t`Set the optional inputs and outputs at the ${'ir'} controller`,
                addHeatPumpCommissioningProtocol: t`Created a heat pump commissioning protocol at the ${'ir'} controller`,
                addSolarSystemCommissioningProtocol: t`Created a solar system commissioning protocol at the ${'ir'} controller`,
                addPhotovoltaicSystemCommissioningProtocol: t`Created a photovoltaic system commissioning protocol at the ${'ir'} controller`,
                updateIRUsers: t`Updated the list of users with access to the ${'ir'} controller`,
                addIndependentServiceProtocol: t`Created a new independent service protocol ${'sp'}`,
                deleteIndependentProtocol: t`Removed the ${'spid'} independent service protocol`,
            },
        },
    },
    detail: {
        sorrySomethingWentWrong: 'Apologize, something went wrong.',
        changeController: 'Change controller serial number',
        changeWentWrong: 'Something went wrong. Refresh the page and try again.',
        successfullyDeleted: `Record successfully deleted.`,
        titleIR: 'Installation details',
        titleNSP: 'Service protocol',
        titleNSPs: 'Service protocols',
        linkInvalidIR: `Either the installation record doesn't exist or you don't have access to it.`,
        linkInvalidNSP: `Either the protocol doesn't exist or you don't have access to it.`,
        sendDocuments: `Sent signed documents`,
        viewFilledData: `Display the filled data`,
        editInstallationData: `Edit the installation data`,
        deleteThisRecord: `Delete the installation record`,
        delete: `Delete`,
        cancel: `Cancel`,
        confirmDeletion: `Do you really want to delete the installation record?`,
        usersWithAccess: `Users with access to this record`,
        newIRIDLabel: `IRID (from the URL address)`,
        copyNSP: `Copy installation information to a new protocol`,
        copySP: `Do you want to create a copy for reporting service intervention by multiple persons?`,
        transferProtocol: `Transfer the protocol to a controller (won't be deleted)`,
        deleteProtocol: `Delete the protocol`,
        duplicate: `Duplicate`,
        yes: `Yes`,
        no: `No`,
        editProtocol: `Edit the protocol`,
        serviceProtocols: `Service intervention protocols`,
        fillInProtocol: `Fill in a protocol`,
        fillInAnotherProtocol: `Fill in another protocol`,
        confirm: `Confirm`,
        saving: `Saving`,
    },
    users: {
        title: 'Users with access to this record',
        addUser: 'Add user',
        remove: 'Remove',
        email: 'Email',
    },
    widget: {
        requiredField: 'This field is required',
        notChosen: 'Not chosen',
        scanBarcode: 'Scan barcode from the heat pump',
        scanCode: 'Scan barcode',

        yes: 'Yes',
        no: 'No',
        clearSelection: `Clear selection`,
        or_Scan: `or`,
        cancel: `Cancel`,
        selectPhoto: 'Select a photo',
        selectPhotos: 'Select photos',
        capturePhoto: 'Capture a photo',
        remove_Photo: 'Remove',
        photo: `Photo`,
        selectFile: 'Select a file',
        selectFiles: 'Select files',
        remove_File: 'Remove',
    },
    pdf: {
        download: `Download`,
        preview: `Preview`,
        downloadFile: `Download document`,
        previewFile: `preview document`,
        page: t`Page ${'page'}/${'total'}`,
    },
    nk: cs.nk,
    fve: {
        name: `Photovoltaic system commissioning protocol`,
        title: `Photovoltaic system permanently commissioning protocol`,
        commission: 'Commission',
        yes: `Yes`,
        no: `No`,
        onFamilyHouseShort: `On a FH`,
        onFamilyHouse: 'On a family house',
        onOtherBuilding: 'On an other building',
        onLand: 'On land',
        withNetworkSupplyPossibility: 'With a option of supply to the network (first parallel connection conducted)',
        withoutOverflows: 'System without overflows',
        islandSystem: 'Island system',
        fieldCount: 'Photovoltaic panel field count',
        connection: 'Connection',
        connectionType: 'Connection type',
        reservedPower: 'Reserved power of the plant',
        mainBreakerSize: 'Main breaker size',
        yearlyEnergyConsumption: 'Average yearly energy consumption – original, without the plant installation',
        accumulationToWater: 'Accumulation to water',
        waterVolume: 'Volume',
        otherSmartControl: 'Other smart control device',
        energySharing: 'Sharing (commute energy)',
        dateOfCommission: `Date of commission`,
        field: t`Field ${'n'}`,
        panelCount: 'Panel count',
        orientation: 'Orientation',
        slope: 'Slope',
        location: 'Location',
    },
    sp: {
        title: `Service protocol`,
        editSP: `SP editing`,
        yearlyHPCheck: `Heat pump yearly check`,
        warrantyRepair: `Warranty repair`,
        postWarrantyRepair: `Post warranty repair`,
        installationApproval: `Installation approval`,
        otherType: `Other`,
        regulusRoute: `RegulusRoute`,
        extendedWarranty: `Extended warranty`,
        warrantyExtended: `Extended`,
        warrantyCommon: `Common`,
        commissioningTC: `Heat pump commission`,
        commissioningSOL: `Solar system commission`,
        commissioningFVE: `Photovoltaic system commission`,
        withoutCode: `Business activity`,
        yearlySOLCheck: `Solar system yearly check`,
        technicalAssistance: `Technical assistance`,
        assemblyWork: `Assembly work`,
        technicalAssistance12: `Technical assistance – 12% VAT`,
        pumpDetails: t`Heat pump ${'n'}: ${'model'} – ${'cislo'}`,
        seeSecondPage: `See the second page`,
        interventionDate: 'Intervention date and time',
        commissioningDate: 'Commissioning date',
        technicianName: 'Technician name',
        technicianInitials: 'Technician initials (into the SP ID)',
        warranty: 'Warranty',
        reportedFault: 'Reported fault',
        interventionDescription: 'Intervention description',
        billing: 'Billing',
        transportation: 'Transportation',
        workType: 'Work type',
        operations: 'Work operations (max. 3)',
        billedTime: 'Billed time',
        interventionTime: 'Intervention time',
        usedSpareParts: 'Used spare parts',
        sparePartCount: 'Spare parts count',
        sparePart: t`Spare part ${'n'}`,
        searchItem: 'Search item',
        name: 'Name',
        code: 'Code',
        unitPrice: 'Unit price',
        warehouse: 'Warehouse',
        amount: 'Amount',
        invoicing: 'Invoicing',
        paidInCash: 'Paid in cash',
        whoToInvoice: 'Who to invoice',
        invoice: 'Invoice',
        systemDescription: 'System description',
        heatPumpCount: 'Count of heat pumps in the installation',
        intervention: 'Intervention',
        doNotInvoice: 'Do not invoice',
        yes: 'Yes',
        no: 'No',
        investor: 'Investor',
        onPaper: 'On paper',
        electronically: 'Electronically',
        assemblyCompany: 'Assembly company',
    },
    ft: {
        title: 'Optional inputs and outputs of the controller',
        setUp: 'Set up',
        inputs: 'Inputs',
        outputs: 'Outputs',
        moduleUNI: 'Module UNI',
        moduleUNI2: 'Module UNI 2',
        setBy: 'Set by',
        date: 'Date',
    },
    rr: {
        name: `Approval with RegulusRoute`,
        title: `Consent to making the IR controller available to the RegulusRoute service`,
        agreeWIthRRPrice: `I agree with the one-time price of CZK 1000 incl. VAT for this service.`,
    },
    nn: {
        title: `Guide to access the IR controller`,
        passwordRegulusRoute: `Regulusroute1`,
        passwordController: `uzivatel`,
    },
    zl: {
        title: `Heat pump warranty`,
        name: t`Heat pump ${'n'} (${'cislo'}) warranty`,
    },
    tc: {
        ...cs.tc,
        name: `Heat pump commissioning protocol`,
        title: `Heat pump permanent commissioning protocol`,
        commission: 'Commission',
        commissioningTitle: 'Commissioning',
        cascade: `Cascade:`,
        cascadeSee: `cascade – see below`,
        suits: `suits`,
        suitsNot: `doesn't suit`,
        yes: `Yes`,
        no: `No`,
        additionalHotWaterSource: `Additional hot water source`,
        mainHotWaterSource: `Main hot water source`,
        numberAndDepthOfBoreholes: `Boreholes count and depth`,
        numberAndLengthOfCircuits: `Circuits count and length`,
        collectorDescription: `Circuit description`,
        pumpDetails: t`Heat pump ${'n'}: ${'model'} – ${'cislo'}`,
        characteristicsAndSizeOfHeatPumpBreaker: `Heat pump breaker characteristics and size`,
        characteristicsAndSizeOfIndoorUnitBreaker: `Indoor unit breaker characteristics and size`,
        distanceFromWall: `Distance of the heat pump from the wall`,
        isCompensatorInstalled: `Compensator to increase protection of the heat pump exchanger installed`,
        isCirculationPumpFilterInstalled: `Circulation pump filter installed on the return line to the heat pump`,
        tanks: `Tanks`,
        typeOfAccumulationTank: `Accumulation tank type`,
        typeOfStorageTank: `Storage tank type`,
        heatingSystem: `Heating system`,
        heatingSystemConsistsOf: `Heating system consists of`,
        radiators: `Radiators`,
        underfloorHeating: `Underfloor heating`,
        combinationHeating: `Combination (underfloor heating and radiators)`,
        otherHeatingSystem: `Other`,
        dateOfCommission: `Commission date`,
        connectedViaRegulusRoute: `Connected using RegulusRoute`,
        connectedWithPublicIpAddress: `Connected using a public IP address`,
        notConnected: `Not connected`,
        groundBoreholes: `Ground boreholes`,
        surfaceCollector: `Surface collector`,
        otherCollector: `Other`,
        expansionTankInstalled: `expansion tank`,
        bufferTankInstalled: `buffer tank`,
    },
    sol: {
        ...cs.sol,
        name: `Solar collector commissioning protocol`,
        title: `Solar collector permanent commissioning protocol`,
        commission: 'Commission',
        yes: `Yes`,
        no: `No`,
        dateOfCommission: `Commission date`,
    },
    rk: {
        ...cs.rk,
        title: `Description of operations during the preventive annual inspection of an air heat pump`,
        formTitle: t`Yearly heat pump ${'n'} checks`,
        name: t`Yearly heat pump ${'n'} (${'cislo'}) checks`,
        fillOut: t`Fill out an yearly heat pump ${'n'} check`,
        year: `Year`,
        pumpDetails: t`Heat pump ${'n'}: ${'model'} – ${'cislo'}`,
        no: `No`,
        yes: `Yes`,
        performingPerson: `Performing person`,
        checkDate: `Check date`,
        note: `Note`,
    },
    od: {
        title: 'Send signed documents',
        signedPdfDocuments: 'PDF files with the signed documents',
        photosFromTheInstallation: 'Photos from the installation',
        noteToEmail: 'Not (to the email)',
        customerEmail: 'Customer email address',
        info1: t`The app will send an email with the documents, optionally with the photos and the note to ${0}.`,
        info2A: t`A copy will be send to you, to ${'user'}.`,
        info2B: t`A copy will be send to the customer to ${'customer'} and to you, to ${'user'}.`,
        info3: `If you don't want to send the email to the customer, remove their address from the above filed.`,
    },
}

export default en